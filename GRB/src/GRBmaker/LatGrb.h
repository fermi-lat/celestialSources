// File: LatGrb.h
//
// GRB simulation

// Interface:
// This class is instantiated in three ways:
// -  No input
//       In this mode, it generates nbsim number of bursts and for each burst, it creates and records a photon list (time,energy)
//		 The number nbsim is generated by the GRBobsConstants class.
// -  Input: Filename
//		 In this mode, it will read the photon list (time,energy) generated by the first option
// -  Input: duration, flux, fraction, power law index, npulse, flag
//		 In this mode, it creates a photon list for the burst specified by the input parameters and if the flag is set,
//			records it in a file
//
#ifndef LAT_GRB_H
#define LAT_GRB_H

#include <vector>
#include <string>

#include "GRB.h"


class HepRandomEngine;



class LatGrb  : public GRB
{
public:
    // Constructors
    LatGrb(HepRandomEngine *engine, const std::string &prefix, const std::string &dir=0);
        
    LatGrb(HepRandomEngine *engine, const std::string &prefix, const double duration, const int npuls, const double flux,
        const double fraction, const double alpha, const double beta, const double epeak, const double specnorm,
        const bool flag);
 
               
    // No memory management function required
    // So - need for destructor, copy constructor and assignment operator to be defined
    
    
    // Accessor Methods
    static double emax()    { return s_emax; }
    
private:
    // Class Methods
    void calcSpecnorm(HepRandomEngine *engine);
    virtual long calcNphoton(HepRandomEngine *engine);
    
    // Computes photon energies for the current burst
    void makeEnergies(HepRandomEngine *engine);
    
    virtual void makeGRB(HepRandomEngine *engine);
    
    
    // Data Members
    static const double  s_emax;
};

#endif // LAT_GRB_H
