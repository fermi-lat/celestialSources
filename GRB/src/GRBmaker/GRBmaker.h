// File: GRBmaker.h
//
// GRB simulation

// Interface:
// This class is instantiated in three ways:
// -  No input
//       In this mode, it generates nbsim number of bursts and for each burst, it creates and records a photon list (time,energy)
//		 The number nbsim is generated by the GRBobsConstants class.
// -  Input: Filename
//		 In this mode, it will read the photon list (time,energy) generated by the first option
// -  Input: duration, flux, fraction, power law index, npulse, flag
//		 In this mode, it creates a photon list for the burst specified by the input parameters and if the flag is set,
//			records it in a file
//
#ifndef GRB_MAKER_H
#define GRB_MAKER_H

#include <vector>
#include <string>

#include "GRBobsUtilities.h"

class GRB;
class HepRandomEngine;


class GRBmaker
{
public:
    // Constructors
    GRBmaker()   {}
    
    GRBmaker(const double duration, const int npuls, const double flux, const double fraction, const double alpha, 
        const double beta, const bool flag);
    
    
    // No memory management function required
    // So - need for destructor, copy constructor and assignment operator to be defined
    
    
    // Class Methods
    GRB *create(const std::vector<std::string> &paramVector);
    GRB *create(const double duration, const int npuls, const double flux, const double fraction, const double alpha, 
        const double beta, const double epeak, const double specnorm, const bool flag);
    
    
    
    // Return a copy of itself
    GRBmaker *clone() const;
    
private:
    // private accessor functions
    
    
    // data members
};


#endif // GRB_MAKER_H
